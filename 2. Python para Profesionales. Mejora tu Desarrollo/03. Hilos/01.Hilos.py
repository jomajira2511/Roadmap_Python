"""
===================================================
Script: 01.Hilos.py
Proyecto: Roadmap Python
Autor: Jhon Jim√©nez
GitHub: https://github.com/jomajira2511
Correo: jomajira2511@gmail.com
Fecha de creaci√≥n: 2025-09-05
Descripci√≥n:
    Ejemplo pr√°ctico de creaci√≥n y ejecuci√≥n de hilos
    (threads) en Python usando la librer√≠a threading.

    Un hilo permite ejecutar tareas en paralelo, de forma
    concurrente, lo que mejora el rendimiento en procesos
    que requieren espera o m√∫ltiples operaciones simult√°neas.

    En este script:
    - Se define una clase Hilo que hereda de threading.Thread.
    - Se sobrescribe el m√©todo run(), que contiene la l√≥gica
      que ejecutar√° cada hilo.
    - Se lanzan m√∫ltiples hilos de forma controlada.
===================================================
"""

import threading  # Librer√≠a est√°ndar para trabajar con hilos
import time       # Permite simular retardos o pausas en la ejecuci√≥n

# ===================================================
# Definici√≥n de la clase Hilo (hereda de Thread)
# ===================================================
class Hilo(threading.Thread):
    def run(self):
        """
        M√©todo que se ejecuta cuando el hilo inicia.
        Sobrescribe el m√©todo run() de la clase Thread.
        """
        print(f"üîµ Inicio : {self.getName()}")   # Mensaje de inicio del hilo
        time.sleep(1)                           # Simulaci√≥n de tarea
        print(f"‚úÖ Final : {self.getName()}")   # Mensaje al finalizar


# ===================================================
# Ejecuci√≥n principal del programa
# ===================================================
if __name__ == "__main__":
    # Lanzamos 4 hilos de forma secuencial con un retardo entre ellos
    for i in range(4):
        hilo = Hilo(name=f"Hilo {i + 1}")  # Nombramos cada hilo
        hilo.start()                       # Iniciamos el hilo
        time.sleep(0.1)                    # Retardo breve para escalonar la ejecuci√≥n
